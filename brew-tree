#!/usr/bin/env node
'use strict';

var spawn = require('child_process').spawn;

/********************************** CLI args **********************************/

var argv = require('minimist')(process.argv.slice(2));

if (argv.h || argv.help) help_exit();

var parseable = !!(argv.p || argv.parseable);
var pkg = (argv['_'].length ? argv['_'][0] : false) || argv.p || argv.parseable;

if (!pkg) help_exit();

/*********************** Collect information on package ***********************/

var uses = spawn('brew', ['uses', '--installed', pkg]);
var deps = spawn('brew', ['deps', pkg]);

var uses_data = '', uses_finished = false;
uses.stdout.on('data', (data) => {
  uses_data += data.toString();
});
uses.on('close', () => {
  uses_finished = true;
  if (uses_finished && deps_finished) data_collected();
});

var deps_data = '', deps_finished = false;
deps.stdout.on('data', (data) => {
  deps_data += data.toString();
});
deps.on('close', () => {
  deps_finished = true;
  if (uses_finished && deps_finished) data_collected();
});

/*************************** Child processes ended ****************************/

var data_collected = function () {
  uses_data = uses_data.trim().split('\n');
  deps_data = deps_data.trim().split('\n');

  var str = '', max = false;
  if (uses_data.length > 0 && uses_data[0] !== '') {
    max = uses_data.reduce(function (len, c) {
      return c.length > len ? c.length : len;
    }, 0) + 2;
    if (pkg.length / 2 > max - 2) max = Math.floor(pkg.length / 2 + 2);

    // First has different suffix
    var first = uses_data.shift() + ' ';
    while (first.length < max) first += '━';
    str = '  ' + first + '┓\n';

    str = uses_data.reduce(function (acc, p) {
      p += ' ';
      while (p.length < max) p += '━';
      return acc + '  ' + p + '┫\n';
    }, str);
  }

  if (deps_data.length > 0 && deps_data[0] !== '') {
    // Compute length of spaces prefix
    var prefix_spaces = '';
    if (!max) {
      // No packages depend on this package, str is empty
      prefix_spaces = '  ';
    } else {
      while (prefix_spaces.length < max) {
        prefix_spaces += ' ';
      }
      prefix_spaces = '  ' + prefix_spaces;
    }

    // Print this package itself
    var prefix_cut = prefix_spaces.length - Math.ceil(pkg.length / 2) + 1;
    str += prefix_spaces.substring(0, prefix_cut) + pkg + '\n';

    // Print dependencies
    var last = deps_data.pop();
    str = deps_data.reduce(function (acc, p) {
      return acc + prefix_spaces + '┣━ ' + p + '\n';
    }, str);

    str += prefix_spaces + '┗━ ' + last + '\n';
  }

  if (str !== '') {
    console.log('\n' + str);
  } else {
    console.log(pkg, 'has no uses or dependencies.');
  }
}

function help_exit() {
  console.log(
    '\n' +
    '  Usage: brew tree [options] <package>\n' +
    '\n' +
    '  See a tree of uses and dependencies for your brew packages\n' +
    '\n' +
    '  Options:\n' +
    '\n' +
    '    -p, --parseable \t Parseable output\n' +
    '    -h, --help      \t Print this help\n'
  );
  process.exit(0);
}